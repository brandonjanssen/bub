<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Text on JanTech</title>
    <link>https://jantech.xyz/tags/text/</link>
    <description>Recent content in Text on JanTech</description>
    <image>
      <url>https://jantech.xyz/img/lobe.png</url>
      <link>https://jantech.xyz/img/lobe.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Oct 2022 20:15:08 +0800</lastBuildDate><atom:link href="https://jantech.xyz/tags/text/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Text From Image With Python</title>
      <link>https://jantech.xyz/post/text-from-image-with-python/</link>
      <pubDate>Thu, 20 Oct 2022 20:15:08 +0800</pubDate>
      
      <guid>https://jantech.xyz/post/text-from-image-with-python/</guid>
      <description>&lt;h1 id=&#34;copying-text-from-image-with-python&#34;&gt;Copying Text from Image with Python&lt;/h1&gt;
&lt;p&gt;One of the fastest ways to extract text from a image is with python. The basic script to do this is very small, it can get quite complicated depending on what you are trying to achieve.&lt;/p&gt;
&lt;p&gt;I will only show the basics to make this work and this only applies to Linux Debian based systems.&lt;/p&gt;
&lt;p&gt;if you like it and want to know more there is plenty of resources to research from.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;We will need PyTesseract&lt;/li&gt;
&lt;li&gt;And we will need  OpenCV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will be using VScode to demonstrate all of this. Install these two libraries using the terminal.&lt;/p&gt;
&lt;h2 id=&#34;step-1-dependencies&#34;&gt;Step 1. Dependencies&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install opencv-python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install pytesseract
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install libtesseract-dev tesseract-ocr  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;From the terminal&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1. mkdir imagepy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2. cd imagepy 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3. touch img2txt.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4. open folder within VScode 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-write-a-couple-lines-of-code&#34;&gt;Step 2. write a couple lines of code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import cv2                                                                                         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;import pytesseract                                                                                 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;img = cv2.imread(&amp;#39;kitty.png&amp;#39;)  # &amp;lt;&amp;lt;---- insert image path here                              
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;text = pytesseract.image_to_string(img)                                                            
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print(text)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-3--find-your-pic-and-hit-play&#34;&gt;Step 3.  Find your pic and hit Play&lt;/h2&gt;
&lt;p&gt;This is a pic of my qtile configs
&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/VlyviPo.png&#34; alt=&#34;kitty.png&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/f0ywglU.png&#34; alt=&#34;&#34;  /&gt;

This is the output
&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/iLwgoj1.png&#34; alt=&#34;&#34;  /&gt;

So it did a pretty decent job, it had some trouble with all of my commits. After its complete just copy and do whatever you would like.&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="copying-text-from-image-with-python">Copying Text from Image with Python</h1>
<p>One of the fastest ways to extract text from a image is with python. The basic script to do this is very small, it can get quite complicated depending on what you are trying to achieve.</p>
<p>I will only show the basics to make this work and this only applies to Linux Debian based systems.</p>
<p>if you like it and want to know more there is plenty of resources to research from.</p>
<hr>
<ul>
<li>We will need PyTesseract</li>
<li>And we will need  OpenCV</li>
</ul>
<p>I will be using VScode to demonstrate all of this. Install these two libraries using the terminal.</p>
<h2 id="step-1-dependencies">Step 1. Dependencies</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install opencv-python
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install pytesseract
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get install libtesseract-dev tesseract-ocr  
</span></span></code></pre></div><ol>
<li><strong>From the terminal</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1. mkdir imagepy
</span></span><span class="line"><span class="cl">2. cd imagepy 
</span></span><span class="line"><span class="cl">3. touch img2txt.py
</span></span><span class="line"><span class="cl">4. open folder within VScode 
</span></span></code></pre></div><h2 id="step-2-write-a-couple-lines-of-code">Step 2. write a couple lines of code</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import cv2                                                                                         
</span></span><span class="line"><span class="cl">import pytesseract                                                                                 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">img = cv2.imread(&#39;kitty.png&#39;)  # &lt;&lt;---- insert image path here                              
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">text = pytesseract.image_to_string(img)                                                            
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">print(text)
</span></span></code></pre></div><h2 id="step-3--find-your-pic-and-hit-play">Step 3.  Find your pic and hit Play</h2>
<p>This is a pic of my qtile configs
<img loading="lazy" src="https://imgur.com/VlyviPo.png" alt="kitty.png"  />
</p>
<p><img loading="lazy" src="https://imgur.com/f0ywglU.png" alt=""  />

This is the output
<img loading="lazy" src="https://imgur.com/iLwgoj1.png" alt=""  />

So it did a pretty decent job, it had some trouble with all of my commits. After its complete just copy and do whatever you would like.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Text Arch</title>
      <link>https://jantech.xyz/post/text-arch/</link>
      <pubDate>Mon, 17 Oct 2022 21:39:29 +0800</pubDate>
      
      <guid>https://jantech.xyz/post/text-arch/</guid>
      <description>&lt;h1 id=&#34;text-to-arch-script-with-excalidraw-on-obsidian&#34;&gt;Text To Arch Script With Excalidraw On Obsidian&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/I8c05jw.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;First we need to install excalidraw on obsidian. This is the link for &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin&#34;&gt;Excalidraw GitHub&lt;/a&gt; and it  will show quite a bit of info, but you will want to install it from community plugins page in setting and you will have to turn on restricted mode.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/uV1pgOk.png&#34; alt=&#34;Text&#34;  title=&#34;Title&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;In the top right button that looks like settings icon click that and it will bring up all the scripts available to install, the text arch script was close to the bottom of the page.&lt;/p&gt;
&lt;p&gt;After that is done we have to figure out how to use it, if you are like me and pretty new to excalidraw it can take a little time to sort out all the features it has to offer.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now you will want to write some text, make sure the text is in a expandable box. Then at top right click the obsidian icon, a drop down menu will appear and there will be a section that says &lt;em&gt;&lt;strong&gt;Downloaded Scripts&lt;/strong&gt;&lt;/em&gt;. Next click the text arch icon then follow the instructions.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/vfPAUYQ.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;After messing around with it for a few minutes you can achieve something like this, or something  much much better.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://imgur.com/3Q0Xbp6.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Excalidraw is an exceptional add on to obsidian and has helped me several times in my short knowing of this tool. This tool fits so many needs, drawing, flow charts, mind maps, and much more, add in scripting and the possibilities are endless. Want to know more, this is his youtube channel  &lt;a href=&#34;https://www.youtube.com/c/VisualPKM&#34;&gt;Zsolt&amp;rsquo;s Visual Personal Knowledge Management&lt;/a&gt;, his videos are quite lengthy sometimes but detailed.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the script that will be installed on obsidian and  can be found &lt;a href=&#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/blob/master/ea-scripts/Text%20Arch.md&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This script is viewable and editable on obsidian.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;el = ea.getViewSelectedElement();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if(!el || el.type!==&amp;#34;text&amp;#34;) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	new Notice(&amp;#34;Please select a text element&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.style.fontSize = el.fontSize;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.style.fontFamily = el.fontFamily;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.style.strokeColor = el.strokeColor;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.style.opacity = el.opacity;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;const r = parseInt (await utils.inputPrompt(&amp;#34;The radius of the arch you&amp;#39;d like to fit the text to&amp;#34;,&amp;#34;number&amp;#34;,&amp;#34;150&amp;#34;));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;const archAbove = await utils.suggester([&amp;#34;Arch above&amp;#34;,&amp;#34;Arch below&amp;#34;],[true,false]);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;if(isNaN(r)) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  new Notice(&amp;#34;The radius is not a number&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  return;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;circlePoint = (angle) =&amp;gt; archAbove
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ? [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		r * Math.sin(angle),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		-r * Math.cos(angle)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		-r * Math.sin(angle),
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		r * Math.cos(angle)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let rot = (archAbove ? -0.5 : 0.5) * ea.measureText(el.text).width/r;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;let objectIDs = [];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for(i=0;i&amp;lt;el.text.length;i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	const character = el.text.substring(i,i+1);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	const width = ea.measureText(character).width;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ea.style.angle = rot;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  const [x,y] = circlePoint(rot);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  rot += (archAbove ? 1 : -1) *width / r;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  objectIDs.push(ea.addText(x,y,character));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.addToGroup(objectIDs);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ea.addElementsToView(true);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<h1 id="text-to-arch-script-with-excalidraw-on-obsidian">Text To Arch Script With Excalidraw On Obsidian</h1>
<p><img loading="lazy" src="https://imgur.com/I8c05jw.png" alt=""  />
</p>
<p>First we need to install excalidraw on obsidian. This is the link for <a href="https://github.com/zsviczian/obsidian-excalidraw-plugin">Excalidraw GitHub</a> and it  will show quite a bit of info, but you will want to install it from community plugins page in setting and you will have to turn on restricted mode.</p>
<hr>
<p><img loading="lazy" src="https://imgur.com/uV1pgOk.png" alt="Text"  title="Title"  />
</p>
<p>In the top right button that looks like settings icon click that and it will bring up all the scripts available to install, the text arch script was close to the bottom of the page.</p>
<p>After that is done we have to figure out how to use it, if you are like me and pretty new to excalidraw it can take a little time to sort out all the features it has to offer.</p>
<hr>
<p>Now you will want to write some text, make sure the text is in a expandable box. Then at top right click the obsidian icon, a drop down menu will appear and there will be a section that says <em><strong>Downloaded Scripts</strong></em>. Next click the text arch icon then follow the instructions.</p>
<p><img loading="lazy" src="https://imgur.com/vfPAUYQ.png" alt=""  />
</p>
<p>After messing around with it for a few minutes you can achieve something like this, or something  much much better.</p>
<p><img loading="lazy" src="https://imgur.com/3Q0Xbp6.png" alt=""  />
</p>
<hr>
<p>Excalidraw is an exceptional add on to obsidian and has helped me several times in my short knowing of this tool. This tool fits so many needs, drawing, flow charts, mind maps, and much more, add in scripting and the possibilities are endless. Want to know more, this is his youtube channel  <a href="https://www.youtube.com/c/VisualPKM">Zsolt&rsquo;s Visual Personal Knowledge Management</a>, his videos are quite lengthy sometimes but detailed.</p>
<hr>
<blockquote>
<p>This is the script that will be installed on obsidian and  can be found <a href="https://github.com/zsviczian/obsidian-excalidraw-plugin/blob/master/ea-scripts/Text%20Arch.md">here.</a></p>
<p>This script is viewable and editable on obsidian.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">*/
</span></span><span class="line"><span class="cl">el = ea.getViewSelectedElement();
</span></span><span class="line"><span class="cl">if(!el || el.type!==&#34;text&#34;) {
</span></span><span class="line"><span class="cl">	new Notice(&#34;Please select a text element&#34;);
</span></span><span class="line"><span class="cl">  return;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ea.style.fontSize = el.fontSize;
</span></span><span class="line"><span class="cl">ea.style.fontFamily = el.fontFamily;
</span></span><span class="line"><span class="cl">ea.style.strokeColor = el.strokeColor;
</span></span><span class="line"><span class="cl">ea.style.opacity = el.opacity;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">const r = parseInt (await utils.inputPrompt(&#34;The radius of the arch you&#39;d like to fit the text to&#34;,&#34;number&#34;,&#34;150&#34;));
</span></span><span class="line"><span class="cl">const archAbove = await utils.suggester([&#34;Arch above&#34;,&#34;Arch below&#34;],[true,false]);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">if(isNaN(r)) {
</span></span><span class="line"><span class="cl">  new Notice(&#34;The radius is not a number&#34;);
</span></span><span class="line"><span class="cl">  return;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">circlePoint = (angle) =&gt; archAbove
</span></span><span class="line"><span class="cl">  ? [
</span></span><span class="line"><span class="cl">		r * Math.sin(angle),
</span></span><span class="line"><span class="cl">		-r * Math.cos(angle)
</span></span><span class="line"><span class="cl">	]
</span></span><span class="line"><span class="cl">	: [
</span></span><span class="line"><span class="cl">		-r * Math.sin(angle),
</span></span><span class="line"><span class="cl">		r * Math.cos(angle)
</span></span><span class="line"><span class="cl">	];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">let rot = (archAbove ? -0.5 : 0.5) * ea.measureText(el.text).width/r;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">let objectIDs = [];
</span></span><span class="line"><span class="cl">for(i=0;i&lt;el.text.length;i++) {
</span></span><span class="line"><span class="cl">	const character = el.text.substring(i,i+1);
</span></span><span class="line"><span class="cl">	const width = ea.measureText(character).width;
</span></span><span class="line"><span class="cl">  ea.style.angle = rot;
</span></span><span class="line"><span class="cl">  const [x,y] = circlePoint(rot);
</span></span><span class="line"><span class="cl">  rot += (archAbove ? 1 : -1) *width / r;
</span></span><span class="line"><span class="cl">  objectIDs.push(ea.addText(x,y,character));
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">ea.addToGroup(objectIDs);
</span></span><span class="line"><span class="cl">ea.addElementsToView(true);
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
